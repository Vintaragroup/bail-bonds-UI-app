openapi: 3.0.3
info:
  title: WarrantDB API
  version: 1.0.0
servers:
  - url: http://localhost:8080/api
paths:
  /health:
    get:
      summary: Liveness / readiness
      responses:
        '200':
          description: OK
  /health/kpis:
    get:
      summary: Dashboard KPIs (normalized)
      description: Returns headline metrics computed over booking_date (YYYY-MM-DD) and bond_amount (Number).
      responses:
        '200':
          description: KPI payload
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KpiResponse'
  /health/trends:
    get:
      summary: Daily trends (normalized)
      description: Returns daily counts and bond sums for the last N days.
      parameters:
        - in: query
          name: days
          schema: { type: integer, default: 14, minimum: 1, maximum: 60 }
      responses:
        '200':
          description: Trend series
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrendResponse'
  /dashboard/top:
    get:
      summary: Top bookings by value
      parameters:
        - in: query
          name: window
          schema: { type: string, enum: [24h,48h,72h,rolling72,7d,30d], default: 24h }
        - in: query
          name: limit
          schema: { type: integer, default: 10, minimum: 1, maximum: 100 }
      responses:
        '200':
          description: Top items
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TopItem'
  /dashboard/new:
    get:
      summary: New bookings “today”
      parameters:
        - in: query
          name: county
          required: false
          schema: { type: string, description: "harris|galveston|brazoria|fortbend|jefferson" }
      responses:
        '200':
          description: New items
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/CaseListItem'
  /dashboard/recent:
    get:
      summary: Bookings in the last 48–72h
      parameters:
        - in: query
          name: limit
          schema: { type: integer, default: 10, minimum: 1, maximum: 200 }
      responses:
        '200':
          description: Recent items
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/CaseListItem'
                  summary:
                    type: object
                    additionalProperties: true
  /dashboard/per-county:
    get:
      summary: Per-county snapshot
      parameters:
        - in: query
          name: window
          schema: { type: string, enum: [24h,48h,72h,rolling72,7d,30d], default: rolling72 }
      responses:
        '200':
          description: Snapshot
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
            items:
              $ref: '#/components/schemas/CountySnapshotItem'
  /auth/session:
    post:
      summary: Exchange Firebase ID token for server session
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [idToken]
              properties:
                idToken:
                  type: string
                  description: Firebase ID token obtained on the client
      responses:
        '200':
          description: Session cookie set
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthSessionResponse'
        '401':
          description: Invalid token
        '400':
          description: Missing idToken
  /auth/me:
    get:
      summary: Current authenticated user profile
      responses:
        '200':
          description: Authenticated user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthProfileResponse'
        '401':
          description: Not authenticated
  /auth/logout:
    post:
      summary: Clear session cookie and sign out
      responses:
        '200':
          description: Logged out
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: boolean
        '401':
          description: Not authenticated
  /auth/session/revoke:
    post:
      summary: Revoke Firebase refresh tokens for current user
      responses:
        '200':
          description: Sessions revoked
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: boolean
  /auth/access-request:
    post:
      summary: Submit an access request
      description: Allows prospective users to notify administrators that they need an account. No authentication required.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email]
              properties:
                email:
                  type: string
                  format: email
                displayName:
                  type: string
                message:
                  type: string
      responses:
        '202':
          description: Request accepted for review
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: boolean
                  request:
                    $ref: '#/components/schemas/AccessRequest'
        '400':
          description: Validation error
        '409':
          description: Account already exists

  /users:
    get:
      summary: List users
      tags: [Users]
      parameters:
        - in: query
          name: role
          schema: { type: string }
        - in: query
          name: status
          schema: { type: string, enum: ['active','suspended','invited','pending_mfa','deleted'] }
        - in: query
          name: search
          schema: { type: string, description: 'Match email or displayName (case-insensitive)' }
      responses:
        '200':
          description: User list
          content:
            application/json:
              schema:
                type: object
                properties:
                  users:
                    type: array
                    items:
                      $ref: '#/components/schemas/UserAccount'
        '403':
          description: Forbidden
    post:
      summary: Create or invite a user
      tags: [Users]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreateRequest'
      responses:
        '201':
          description: User created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserCreateResponse'
        '200':
          description: User already existed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserCreateResponse'
        '400':
          description: Validation error
        '403':
          description: Forbidden

  /users/{uid}:
    patch:
      summary: Update an existing user
      tags: [Users]
      parameters:
        - in: path
          name: uid
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdateRequest'
      responses:
        '200':
          description: Updated user
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/UserAccount'
        '400':
          description: Validation error
        '403':
          description: Forbidden
        '404':
          description: User not found

  /users/{uid}/revoke:
    post:
      summary: Revoke refresh tokens for a user
      tags: [Users]
      parameters:
        - in: path
          name: uid
          required: true
          schema: { type: string }
      responses:
        '200':
          description: Revoked
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: boolean
        '403':
          description: Forbidden
        '404':
          description: User not found
  /access-requests:
    get:
      summary: List pending access requests
      tags: [Users]
      parameters:
        - in: query
          name: status
          schema: { type: string, enum: ['pending','reviewed','completed','rejected'] }
      responses:
        '200':
          description: Access requests
          content:
            application/json:
              schema:
                type: object
                properties:
                  requests:
                    type: array
                    items:
                      $ref: '#/components/schemas/AccessRequest'
        '403':
          description: Forbidden
  /access-requests/{id}:
    patch:
      summary: Update access request status
      tags: [Users]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [status]
              properties:
                status:
                  type: string
                  enum: ['pending','reviewed','completed','rejected']
      responses:
        '200':
          description: Updated request
          content:
            application/json:
              schema:
                type: object
                properties:
                  request:
                    $ref: '#/components/schemas/AccessRequest'
        '400':
          description: Validation error
        '403':
          description: Forbidden
        '404':
          description: Not found
        '401':
          description: Not authenticated
components:
  schemas:
    Money:
      type: number
      format: double
      example: 15000
    DateYMD:
      type: string
      description: ISO date string in YYYY-MM-DD (UTC) format
      example: '2025-09-16'
    KpiResponse:
      type: object
      properties:
        ok: { type: boolean }
        today:
          type: object
          properties:
            count: { type: integer }
            bond_sum: { $ref: '#/components/schemas/Money' }
        yesterday:
          type: object
          properties:
            count: { type: integer }
            bond_sum: { $ref: '#/components/schemas/Money' }
        last72h:
          type: object
          properties:
            count: { type: integer }
            bond_sum: { $ref: '#/components/schemas/Money' }
        last7d:
          type: object
          properties:
            count: { type: integer }
            bond_sum: { $ref: '#/components/schemas/Money' }
        topCounties24h:
          type: array
          items:
            type: object
            properties:
              county: { type: string }
              count: { type: integer }
              bond_sum: { $ref: '#/components/schemas/Money' }
        ts:
          type: string
          format: date-time
    TrendPoint:
      type: object
      properties:
        date: { $ref: '#/components/schemas/DateYMD' }
        count: { type: integer }
        bond_sum: { $ref: '#/components/schemas/Money' }
    TrendResponse:
      type: object
      properties:
        ok: { type: boolean }
        start: { $ref: '#/components/schemas/DateYMD' }
        end: { $ref: '#/components/schemas/DateYMD' }
        series:
          type: array
          items: { $ref: '#/components/schemas/TrendPoint' }
        ts:
          type: string
          format: date-time
    TopItem:
      type: object
      properties:
        id: { type: string }
        name: { type: string }
        county: { type: string }
        booking_date: { $ref: '#/components/schemas/DateYMD' }
        bond_amount: { $ref: '#/components/schemas/Money' }
        value: { $ref: '#/components/schemas/Money' }
    CaseListItem:
      type: object
      properties:
        id: { type: string }
        person: { type: string }
        county: { type: string }
        booking_date: { $ref: '#/components/schemas/DateYMD' }
        bond_amount: { $ref: '#/components/schemas/Money' }
        contacted: { type: boolean }
    AuthUser:
      type: object
      properties:
        uid: { type: string }
        email: { type: string, nullable: true }
        emailVerified: { type: boolean }
        displayName: { type: string, nullable: true }
        roles:
          type: array
          items: { type: string }
        departments:
          type: array
          items: { type: string }
        counties:
          type: array
          items: { type: string }
        status:
          type: string
        mfaEnforced:
          type: boolean
        lastLoginAt:
          type: string
          format: date-time
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    AuthSessionResponse:
      type: object
      properties:
        ok: { type: boolean }
        user: { $ref: '#/components/schemas/AuthUser' }
        sessionExpiresAt:
          type: string
          format: date-time
    AuthProfileResponse:
      type: object
      properties:
        ok: { type: boolean }
        user: { $ref: '#/components/schemas/AuthUser' }
        offense: { type: string }
        case_number: { type: string }
    UserAccount:
      type: object
      properties:
        uid: { type: string }
        email: { type: string, format: email }
        displayName: { type: string, nullable: true }
        roles:
          type: array
          items: { type: string }
        departments:
          type: array
          items: { type: string }
        counties:
          type: array
          items: { type: string }
        status:
          type: string
          enum: ['active','suspended','invited','pending_mfa','deleted']
        mfaEnforced: { type: boolean }
        lastLoginAt: { type: string, format: date-time, nullable: true }
        invitedAt: { type: string, format: date-time, nullable: true }
        invitedBy: { type: string, nullable: true }
        lastRoleChangeAt: { type: string, format: date-time, nullable: true }
        createdAt: { type: string, format: date-time }
        updatedAt: { type: string, format: date-time }
    UserCreateRequest:
      type: object
      required: [email]
      properties:
        email: { type: string, format: email }
        displayName: { type: string }
        roles:
          type: array
          items: { type: string }
        departments:
          type: array
          items: { type: string }
        counties:
          type: array
          items: { type: string }
        status:
          type: string
          enum: ['active','suspended','invited','pending_mfa','deleted']
    UserCreateResponse:
      type: object
      properties:
        user: { $ref: '#/components/schemas/UserAccount' }
        inviteLink:
          type: string
          nullable: true
          description: Password setup link that can be shared securely
    UserUpdateRequest:
      type: object
      properties:
        email: { type: string, format: email }
        displayName: { type: string }
        roles:
          type: array
          items: { type: string }
        departments:
          type: array
          items: { type: string }
        counties:
          type: array
          items: { type: string }
        status:
          type: string
          enum: ['active','suspended','invited','pending_mfa','deleted']
        mfaEnforced: { type: boolean }
    AccessRequest:
      type: object
      properties:
        id: { type: string }
        email: { type: string, format: email }
        displayName: { type: string, nullable: true }
        message: { type: string, nullable: true }
        status: { type: string, enum: ['pending','reviewed','completed','rejected'] }
        createdAt: { type: string, format: date-time }
        updatedAt: { type: string, format: date-time }
    CountySnapshotItem:
      type: object
      properties:
        county: { type: string }
        count: { type: integer }
        bond_sum: { $ref: '#/components/schemas/Money' }
        latest_booking_date: { $ref: '#/components/schemas/DateYMD' }
